"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[445],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),d=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(a),m=n,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return a?r.createElement(h,o(o({ref:t},c),{},{components:a})):r.createElement(h,o({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3693:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:5,id:"joi",title:"Validation using Joi",slug:"joi"},o=void 0,s={unversionedId:"express/advance/joi",id:"express/advance/joi",title:"Validation using Joi",description:"When we write backend code that interacts with end-users and takes and processes data from requests, we have to be super careful to put up some form of protection that filters out invalid data. For example, if we store the date of birth of a user in our database, then we cannot allow a value that is not a date to be stored, because it is not what we intend to be present and can lead to strange behavior.",source:"@site/docs/1.-express/2.advance/11.joi.mdx",sourceDirName:"1.-express/2.advance",slug:"/express/advance/joi",permalink:" /mra-docs/docs/express/advance/joi",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1.-express/2.advance/11.joi.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,id:"joi",title:"Validation using Joi",slug:"joi"},sidebar:"tutorialSidebar",previous:{title:"JSON Web Token (JWT)",permalink:" /mra-docs/docs/express/advance/jwt"},next:{title:"Learning React JS",permalink:" /mra-docs/docs/category/learning-react-js"}},l={},d=[{value:"Step 1: Install Joi",id:"step-1-install-joi",level:2},{value:"Step 2: Create a schema",id:"step-2-create-a-schema",level:2},{value:"Step 3: Validate data",id:"step-3-validate-data",level:2},{value:"If data is invalid",id:"if-data-is-invalid",level:3},{value:"If data is valid",id:"if-data-is-valid",level:3}],c={toc:d};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"When we write backend code that interacts with end-users and takes and processes data from requests, we have to be super careful to put up some form of protection that filters out invalid data. For example, if we store the date of birth of a user in our database, then we cannot allow a value that is not a date to be stored, because it is not what we intend to be present and can lead to strange behavior."),(0,n.kt)("p",null,"To mitigate this, we can set up filters that analyze each and every data key sent by the frontend. We can do this all by ourselves without using a third-party library.\nAssume in our code we want to check whether there is a key called parameterX which lies between 100 and 1000."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"if (!data.parameterX) {\n    throw new Error('parameterX is required');\n}\n\ntry {\n    const value = parseInt(data.parameterX);\n    if (value < 100 || value > 1000) {\n        throw new Error('parameterX must be between 100 and 1000');\n    }\n} catch (e) {\n    throw new Error('parameterX must be an integer');\n}\n")),(0,n.kt)("p",null,"This is a very simple example, but it is not the only way to do it. We can use the Joi library to do this."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const schema = Joi.object().keys({\n    parameterX: Joi.number().min(100).max(1000).required()\n});\n\nconst { error } = Joi.validate(data, schema);\nif (error) {\n    throw new Error(error.details[0].message);\n}\n")),(0,n.kt)("h2",{id:"step-1-install-joi"},"Step 1: Install Joi"),(0,n.kt)("p",null,"First, we need to install Joi."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm install joi\n")),(0,n.kt)("h2",{id:"step-2-create-a-schema"},"Step 2: Create a schema"),(0,n.kt)("p",null,"We can create a schema using the Joi library."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const schema = Joi.object().keys({\n    parameterX: Joi.number().min(100).max(1000).required()\n});\n")),(0,n.kt)("h2",{id:"step-3-validate-data"},"Step 3: Validate data"),(0,n.kt)("p",null,"We will use it as middleware to validate data. Means before going to backend code, we will check if the data is valid. "),(0,n.kt)("p",null,"For validation, there are two ways to do it using Joi. "),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The first way is to use the ",(0,n.kt)("inlineCode",{parentName:"li"},"schema.validate")," method. It takes the data as an argument and returns an object with the data and the error."),(0,n.kt)("li",{parentName:"ol"},"The second way is to use the ",(0,n.kt)("inlineCode",{parentName:"li"},"Joi.compile(schema).validate")," method. It takes the data as an argument and returns an object with the data and the error. In this case we can validate body, query, params, headers, and cookies in one go. That means we can use the same schema for all of them.")),(0,n.kt)("p",null,"For now, we will use the first way. But in later example we will use the second way."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const { error } = schema.validate(data);\n\nif (error) {\n    throw new Error(error.details[0].message);\n}\n")),(0,n.kt)("h3",{id:"if-data-is-invalid"},"If data is invalid"),(0,n.kt)("p",null,"If the data is invalid, I will throw an error, and that's it. It will not go to the backend code. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"if (error) {\n    throw new Error(error.details[0].message);\n}\n")),(0,n.kt)("h3",{id:"if-data-is-valid"},"If data is valid"),(0,n.kt)("p",null,"If the data is valid, I will go to the next middleware. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"if (!error) {\n    next();\n}\n")),(0,n.kt)("h1",{id:"code"},"Code"),(0,n.kt)("p",null,"You can download the related code from ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mrizwanashiq/learning-express-js/tree/example/validation-with-joi"},"here")))}p.isMDXComponent=!0}}]);