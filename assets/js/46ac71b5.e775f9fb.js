"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4398],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=o,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3453:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:7,id:"form-with-mui-and-table-with-antd",title:"Form with MUI and Table with AntD",slug:"form-with-mui-and-table-with-antd"},r=void 0,l={unversionedId:"react/form-with-mui-and-table-with-antd",id:"react/form-with-mui-and-table-with-antd",title:"Form with MUI and Table with AntD",description:"Creating Form with MUI and Table with Ant Design",source:"@site/docs/2.-react/7.-Form-with-MUI-and-Table-with-AntD.md",sourceDirName:"2.-react",slug:"/react/form-with-mui-and-table-with-antd",permalink:" /mra-docs/docs/react/form-with-mui-and-table-with-antd",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2.-react/7.-Form-with-MUI-and-Table-with-AntD.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"form-with-mui-and-table-with-antd",title:"Form with MUI and Table with AntD",slug:"form-with-mui-and-table-with-antd"},sidebar:"tutorialSidebar",previous:{title:"Form and Table",permalink:" /mra-docs/docs/react/form-and-table"},next:{title:"Local Storage for Session Management",permalink:" /mra-docs/docs/react/local-storage-for-session-management"}},s={},d=[{value:"Creating Form with MUI and Table with Ant Design",id:"creating-form-with-mui-and-table-with-ant-design",level:2},{value:"Creating a Form",id:"creating-a-form",level:2},{value:"<code>style</code>",id:"style",level:2},{value:"<code>type</code>",id:"type",level:3},{value:"<code>inputProps</code>",id:"inputprops",level:3},{value:"<code>label</code>",id:"label",level:3},{value:"<code>variant</code>",id:"variant",level:3},{value:"<code>name</code>",id:"name",level:3},{value:"<code>required</code>",id:"required",level:3},{value:"Creating a Table",id:"creating-a-table",level:2},{value:"<code>columns</code>",id:"columns",level:3},{value:"<code>dataSource</code>",id:"datasource",level:2},{value:"Final Code",id:"final-code",level:2},{value:"Code",id:"code",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"creating-form-with-mui-and-table-with-ant-design"},"Creating Form with MUI and Table with Ant Design"),(0,o.kt)("p",null,"In last blog we learned how to create a form and a table with basic react tags."),(0,o.kt)("p",null,"Now just to give you idea how many libraries there that reduce the amount of time and code we need to write. In this I am using two very useful libraries: Material UI and Ant Design."),(0,o.kt)("p",null,"Material UI for creating form and Ant Design for creating table."),(0,o.kt)("p",null,"I will do changes in the previous code. So, I will not repeat the code from the previous blog. I will only change the code from the previous blog. If you did not read the previous blog, please read it first."),(0,o.kt)("h2",{id:"creating-a-form"},"Creating a Form"),(0,o.kt)("p",null,"I am using Material UI for creating a form. First I am importing the Material UI library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import 'antd/dist/antd.css';\nimport {\n  Typography,\n  AppBar,\n  Toolbar,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\n")),(0,o.kt)("p",null,"I'll use the same ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmit")," what I was in the previous blog. "),(0,o.kt)("p",null,"Now I am creating a form. I am creating a form with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<form>")," tag. I am creating a form with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<form>")," tag. And I will use ",(0,o.kt)("inlineCode",{parentName:"p"},"@material-ui/core"),"'s TextField, Button that I imported earlier. ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField")," has a lot of properties that I can use. But for now I will use only ",(0,o.kt)("inlineCode",{parentName:"p"},"style"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"label"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"variant"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"required")),(0,o.kt)("p",null,"Let's do it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<form onSubmit={onSubmit}>\n  <TextField\n    style={customStyle}\n    type="text"\n    label="Name"\n    variant="outlined"\n    name="name"\n    required\n  />\n  <TextField\n    style={customStyle}\n    type="text"\n    label="Author"\n    variant="outlined"\n    name="author"\n    required\n  />\n  <TextField\n    style={customStyle}\n    type="number"\n    inputProps={{ min: 0 }}\n    label="Price"\n    variant="outlined"\n    name="price"\n    required\n  />\n  <TextField\n    style={customStyle}\n    type="number"\n    inputProps={{ min: 0 }}\n    label="Stock"\n    variant="outlined"\n    name="stock"\n    required\n  />\n  <Button style={customStyle} variant="contained" color="primary" type=\'submit\'>\n    save\n  </Button>\n</form>\n')),(0,o.kt)("p",null,"Now explain TextField's properties."),(0,o.kt)("h2",{id:"style"},(0,o.kt)("inlineCode",{parentName:"h2"},"style")),(0,o.kt)("p",null,"I am using ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," property to set the style of the TextField like this ",(0,o.kt)("inlineCode",{parentName:"p"},"style={customStyle}"),". I created ",(0,o.kt)("inlineCode",{parentName:"p"},"customStyle")," object with the style for the TextField. And assign it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," property of all the TextFields, and Button, instead of applying the style to all the elements. "),(0,o.kt)("p",null,"Here is the code for the customStyle object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const customStyle = { \n  margin: "5px", \n  marginTop: "10px", \n  marginBottom: "10px", \n  width: "100%", \n  height: "50px", \n  borderRadius: "5px", \n  fontSize: "16px" \n};\n')),(0,o.kt)("h3",{id:"type"},(0,o.kt)("inlineCode",{parentName:"h3"},"type")),(0,o.kt)("p",null,"I am using ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," property to set the type of the TextField. You see in type property of the first two ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField")," that I am using the ",(0,o.kt)("inlineCode",{parentName:"p"},'type="text"'),". Cause there data is text. And in last two, I am using ",(0,o.kt)("inlineCode",{parentName:"p"},'type="number"'),". Cause there data is number. "),(0,o.kt)("h3",{id:"inputprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"inputProps")),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"inputProps")," property to set the properties of the input. For example, in the first ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField")," I am using ",(0,o.kt)("inlineCode",{parentName:"p"},"inputProps={{ min: 0 }}"),". This means that the input will have a minimum value of 0."),(0,o.kt)("h3",{id:"label"},(0,o.kt)("inlineCode",{parentName:"h3"},"label")),(0,o.kt)("p",null,"I am using ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," property to set the label of the TextField. I am using ",(0,o.kt)("inlineCode",{parentName:"p"},'label="Name"')," for the first ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField")," and ",(0,o.kt)("inlineCode",{parentName:"p"},'label="Author"')," for the second ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField"),"."),(0,o.kt)("h3",{id:"variant"},(0,o.kt)("inlineCode",{parentName:"h3"},"variant")),(0,o.kt)("p",null,"I am using ",(0,o.kt)("inlineCode",{parentName:"p"},"variant")," property to set the variant of the TextField. I am using ",(0,o.kt)("inlineCode",{parentName:"p"},'variant="outlined"'),"."),(0,o.kt)("h3",{id:"name"},(0,o.kt)("inlineCode",{parentName:"h3"},"name")),(0,o.kt)("p",null,"I am using ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property to set the name of the TextField. Name is used to identify the TextField in the form. It helps to get the value of the TextField. I used it when I am submitting the form."),(0,o.kt)("h3",{id:"required"},(0,o.kt)("inlineCode",{parentName:"h3"},"required")),(0,o.kt)("p",null,"You see I used required property to make the field required. It will display an error message if the field is empty while submitting the form."),(0,o.kt)("h2",{id:"creating-a-table"},"Creating a Table"),(0,o.kt)("p",null,"I am using Ant Design for creating a table. First I am importing the Ant Design library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Table, Button } from "antd";\n')),(0,o.kt)("p",null,"In previous blog I created a table with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<table>")," tag, then I used ",(0,o.kt)("inlineCode",{parentName:"p"},"<tr>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<th>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<td>")," tags to create a table. But with Ant Design, I can create a table with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table>")," tag. It will take few properties to create a table, but I will not explain all the properties, for now I will only two properties: ",(0,o.kt)("inlineCode",{parentName:"p"},"columns")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dataSource"),"."),(0,o.kt)("p",null,"First of all, I am creating a table with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table>")," tag."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<Table columns={columns} dataSource={books} />\n")),(0,o.kt)("h3",{id:"columns"},(0,o.kt)("inlineCode",{parentName:"h3"},"columns")),(0,o.kt)("p",null,"In Ant Design's table there's property name columns. It's an array of objects. Each object is a column has a property name ",(0,o.kt)("inlineCode",{parentName:"p"},"title"),",  ",(0,o.kt)("inlineCode",{parentName:"p"},"dataIndex"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"render"),". "),(0,o.kt)("p",null,"These are the columns that I used in the blog."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const columns = [\n{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n},\n{\n  title: 'Author',\n  dataIndex: 'author',\n  key: 'author',\n},\n{\n  title: 'Price',\n  dataIndex: 'price',\n  key: 'price',\n},\n{\n  title: 'Stock',\n  dataIndex: 'stock',\n  key: 'stock',\n},\n{\n  title: 'Action',\n  key: 'action',\n  render: (text, record) => (\n    <AntDButton color='primary' onClick={() => deleteBook(record._id)}>Delete</AntDButton>\n  ),\n}];\n")),(0,o.kt)("p",null,"Title means the name of the column. DataIndex means the name of the property in the object (Data Source). Key means the name of the column. Render means the function that I will use to create the column."),(0,o.kt)("p",null,"I used render function to create a button that will delete the book. I used the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property to call the function ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteBook"),". Render is a function that takes two parameters: text and record. The text is the text in the cell. The record is the object that I am using in the table. I used the ",(0,o.kt)("inlineCode",{parentName:"p"},"record._id")," to get the id of the book. "),(0,o.kt)("p",null,"Render function is used if we want to use tags in the table."),(0,o.kt)("h2",{id:"datasource"},(0,o.kt)("inlineCode",{parentName:"h2"},"dataSource")),(0,o.kt)("p",null,"In Ant Design's table there's property name dataSource. It's an array of objects. Each object is a book. I created an array of books using ",(0,o.kt)("inlineCode",{parentName:"p"},"React.useState")," in the previous blog. I simply assign the array of books to the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataSource")," property."),(0,o.kt)("h2",{id:"final-code"},"Final Code"),(0,o.kt)("p",null,"Final code after I finished the blog."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import \'./App.css\';\nimport axios from \'axios\';\nimport React from \'react\';\nimport {\n  Typography,\n  AppBar,\n  Toolbar,\n  TextField,\n  Button as MuiButton,\n} from "@material-ui/core";\nimport \'antd/dist/antd.css\';\nimport { Table, Button as AntDButton } from \'antd\';\n\nfunction App() {\n\n  /*\n  useState is a hook that allows us to create a state variable in our component and also update it when we want to. \n  It takes a single argument, the initial value of the state variable. We can then use this state variable to update the component. \n  We can also use this state variable to get the current value of the state variable. \n  */\n  const [books, setBooks] = React.useState([]);\n\n  //  useEffect is a hook that runs after the component is rendered, but before the component is updated. \n  React.useEffect(() => {\n    // This is to get the list of books from the backend.\n    axios.get(\'http://localhost:2022/book\')\n      .then(response => {\n        // Once we get the list of books, we need to set the state of the component with the list of books.\n        setBooks(response.data);\n      })\n      .catch(error => {\n        // If backend is not running, this will throw an error. So we need to handle it.\n        // I am adding book to the list, and it will be displayed in the UI.\n        const book = {\n          _id: (books.length + 1).toString(),\n          name: \'Default Book\',\n          author: \'Default Author\',\n          price: 0,\n          stock: 0\n        }\n        // I am adding book to the list, and it will be displayed in the UI.\n        setBooks([book]);\n      });\n  });\n\n  const onSubmit = async (e) => {\n    // e.preventDefault prevents page from refreshing when form is submitted (default behavior)\n    e.preventDefault();\n    // This is body of the request, we can send it as a json object\n    const book = {\n      name: e.target.name.value,\n      author: e.target.author.value,\n      price: parseInt(e.target.price.value),\n      stock: parseInt(e.target.stock.value)\n    }\n    axios.post(\'http://localhost:2022/book\', book).then(async res => {\n      // Once the book is added, we need to get the list of books\n      const bookList = await axios.get(\'http://localhost:2022/book\');\n      // And render the list of books in the UI. I am reassigning the state with the new list of books\n      setBooks(bookList.data);\n    }).catch(err => {\n      // If backend is not running, this will throw an error. So we need to handle it. \n      // I am adding book to the list, and it will be displayed in the UI.\n      book._id = (books.length + 1).toString();\n      const tempBooks = [...books, book];\n      setBooks(tempBooks);\n    }).finally(() => {\n      // This is to clear the form after submitting.\n      e.target.name.value = \'\';\n      e.target.author.value = \'\';\n      e.target.price.value = \'\';\n      e.target.stock.value = \'\';\n    });\n  }\n\n  const deleteBook = async (id) => {\n    // This is to delete the book from the list.\n    axios.delete(`http://localhost:2022/book/${id}`).then(async res => {\n      // Once the book is deleted, we need to get the list of books\n      const bookList = await axios.get(\'http://localhost:2022/book\');\n      // And render the list of books in the UI. I am reassigning the state with the new list of books\n      setBooks(bookList.data);\n    }).catch(err => {\n      // If backend is not running, this will throw an error. So we need to handle it.\n      // I am deleting the book from the list, and it will be removed from the UI.\n      const tempBooks = books.filter(book => book._id !== id);\n      setBooks(tempBooks);\n    });\n  }\n\n  const columns = [\n  {\n    title: \'Name\',\n    dataIndex: \'name\',\n    key: \'name\',\n  },\n  {\n    title: \'Author\',\n    dataIndex: \'author\',\n    key: \'author\',\n  },\n  {\n    title: \'Price\',\n    dataIndex: \'price\',\n    key: \'price\',\n  },\n  {\n    title: \'Stock\',\n    dataIndex: \'stock\',\n    key: \'stock\',\n  },\n  {\n    title: \'Action\',\n    key: \'action\',\n    render: (text, record) => (\n      <AntDButton color=\'primary\' onClick={() => deleteBook(record._id)}>Delete</AntDButton>\n    ),\n  }];\n\n  const customStyle = { margin: "5px", marginTop: "10px", marginBottom: "10px", width: "100%", height: "50px", borderRadius: "5px", fontSize: "16px" }\n\n  return (\n    <div className="App">\n      <h1>Book Store</h1>\n\n      <AppBar>\n        <Toolbar>\n          <Typography variant="h6" color="inherit">\n            Book Store\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div style={{marginTop: \'30px\'}}/>\n\n      <Typography variant="h5" color="primary">Add Book</Typography>\n      <form onSubmit={onSubmit}>\n        <TextField\n          style={customStyle}\n          type="text"\n          label="Name"\n          variant="outlined"\n          name="name"\n          required\n        />\n        <TextField\n          style={customStyle}\n          type="text"\n          label="Author"\n          variant="outlined"\n          name="author"\n          required\n        />\n        <TextField\n          style={customStyle}\n          type="number"\n          inputProps={{ min: 0 }}\n          label="Price"\n          variant="outlined"\n          name="price"\n          required\n        />\n        <TextField\n          style={customStyle}\n          type="number"\n          inputProps={{ min: 0 }}\n          label="Stock"\n          variant="outlined"\n          name="stock"\n          required\n        />\n        <MuiButton style={customStyle} variant="contained" color="primary" type=\'submit\'>\n          save\n        </MuiButton>\n      </form>\n\n      <Typography variant="h5" color="primary">Books</Typography>\n      <Table columns={columns} dataSource={books} />\n    </div>\n  );\n}\n\nexport default App;\n')),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("p",null,"You can get the complete code from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrizwanashiq/learning-react-js/tree/example/form-with-mui-and-table-with-antd"},"here")))}m.isMDXComponent=!0}}]);