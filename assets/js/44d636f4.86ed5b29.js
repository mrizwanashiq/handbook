"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3159],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return t?a.createElement(h,s(s({ref:n},d),{},{components:t})):a.createElement(h,s({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:4,id:"basic-code",title:"Basic Code",description:"Let's get started with some basic code.",slug:"basic-code"},s=void 0,i={unversionedId:"express/basics/basic-code",id:"express/basics/basic-code",title:"Basic Code",description:"Let's get started with some basic code.",source:"@site/docs/1.-express/1.basics/4.basic-code.mdx",sourceDirName:"1.-express/1.basics",slug:"/express/basics/basic-code",permalink:" /mra-docs/docs/express/basics/basic-code",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1.-express/1.basics/4.basic-code.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"basic-code",title:"Basic Code",description:"Let's get started with some basic code.",slug:"basic-code"},sidebar:"tutorialSidebar",previous:{title:"Introduction to Express JS",permalink:" /mra-docs/docs/express/basics/expressjs"},next:{title:"What is REST API and Why we use it",permalink:" /mra-docs/docs/express/basics/rest-api"}},l={},p=[{value:"Create Development Environment",id:"create-development-environment",level:2},{value:"Start Build Your Project",id:"start-build-your-project",level:2},{value:"Create a New Project",id:"create-a-new-project",level:3},{value:"Install Dependencies",id:"install-dependencies",level:3},{value:"Create a file named <code>index.js</code>",id:"create-a-file-named-indexjs",level:3},{value:"Nodemon",id:"nodemon",level:2},{value:"Basics of API Testing Using Postman",id:"basics-of-api-testing-using-postman",level:2},{value:"Code",id:"code",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"create-development-environment"},"Create Development Environment"),(0,o.kt)("p",null,"First, you need to download Node to PC. You can download it from the official node ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/en/"},"website")," and install it on your PC. It also installs ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," (Node Package Manager). The npm is the world's largest software registry helpful of development."),(0,o.kt)("p",null,"After installing Node you can check that installs correctly on your PC. Open cmd and type the below command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node -v\n")),(0,o.kt)("p",null,"If your correctly installed Node, it gives the node version that you currently installed. If you type the below command, you can see the version of npm installed on your PC."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm -v\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," is another popular package manager. You can install it using the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g yarn\n")),(0,o.kt)("p",null,"Next, you need to download IDE or code editor to develop your node project. You can use like ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"VS Code"),", or ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/webstorm/download/"},"WebStorm")," or anyone else. VS Code is the most popular code editor in the world. It is lightweight software, and it's easy to manage our project. You can download it from the ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"link"),"."),(0,o.kt)("h2",{id:"start-build-your-project"},"Start Build Your Project"),(0,o.kt)("p",null,"Let's start building our first express project."),(0,o.kt)("h3",{id:"create-a-new-project"},"Create a New Project"),(0,o.kt)("p",null,"You can create a folder to develop the project. I name this folder as ",(0,o.kt)("inlineCode",{parentName:"p"},"myFirstApp"),". Next, you need to open that directory from your IDE. After that, you need to open a new Terminal. You can see Terminal in the menu bar, click it and select New Terminal in the drop-down menu. Now you can type the init command in the Terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm init\n")),(0,o.kt)("p",null,"It asks for some information about your project. Author name, description of the project, license going to use, git repository like information. You can set default values by pressing enter. As you can see in your myFirstApp folder a new file was created called ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". If you open this file you can see information about the project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n    "name": "myfirstapp",\n    "version": "1.0.0",\n    "description": "",\n    "main": "index.js",\n    "scripts": {\n        "test": "echo \\"Error: no test specified\\" && exit 1"\n    },\n    "author": "",\n    "license": "ISC"\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," (",(0,o.kt)("inlineCode",{parentName:"p"},'"main": "index.js"'),") is the entry point of your when you run the application. By default, it entered a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js"),". You can change it into anything like ",(0,o.kt)("inlineCode",{parentName:"p"},"server.js"),". And add this key value in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file"),(0,o.kt)("p",null,"I like to add ",(0,o.kt)("inlineCode",{parentName:"p"},'"type": "module"')," in package.json, it is a key value that tells the system that your project is a module. You can change it into ",(0,o.kt)("inlineCode",{parentName:"p"},'"application"')," if you want to create a web application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n    //...\n    "type": "module",\n    //...\n}\n')),(0,o.kt)("h3",{id:"install-dependencies"},"Install Dependencies"),(0,o.kt)("p",null,"Now, we need to install a dependency called ",(0,o.kt)("inlineCode",{parentName:"p"},"express"),". It is a backend web application framework for NodeJS. It is helpful for developing web applications and APIs. Express JS gives useful features for development. You can install Express using the below command by typing in the Terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express\n")),(0,o.kt)("p",null,"After installing the Express you can see a new element called ",(0,o.kt)("inlineCode",{parentName:"p"},"dependencies")," inside ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". Inside that, you can see installed dependencies and their versions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n    //...\n    "dependencies": {\n        "express": "^4.17.1"\n    }\n    //...\n}\n')),(0,o.kt)("admonition",{title:"Note",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can install dependencies using ",(0,o.kt)("inlineCode",{parentName:"p"},"npm install")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"npm i")," command. You can also install dependencies as a development dependency using ",(0,o.kt)("inlineCode",{parentName:"p"},"npm install --save-dev")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"npm i -D")," command.")),(0,o.kt)("h3",{id:"create-a-file-named-indexjs"},"Create a file named ",(0,o.kt)("inlineCode",{parentName:"h3"},"index.js")),(0,o.kt)("p",null,"Next, we need to create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," to write the server-side implementation. You can create this file inside the myFirstApp directory. Now your file structure is like the below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"|_ myFirstApp\n\n    |_ index.js\n\n    |_ node_modules\n\n    |_ package-lock.json\n\n    |_ package.json\n")),(0,o.kt)("p",null,"Inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file you need to implement codes like the below example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import express from 'express';\n\nconst app = express();\n\n/**\n * The first line here is grabbing the main Express module from the package you installed. \n * This module is a function, which we then run on the second line to create our app variable. \n * You can create multiple apps this way, each with its own requests and responses.\n */\n\napp.get('/', (req, res) => {\n    res.send('Hello World!')\n})\n\n/**\n * These lines of code are where we tell our Express server how to handle a GET request to our server.\n * Express includes similar functions for POST, PUT, PATCH, DELETE, etc. using app.post(...), app.put(...), etc.\n * \n * These functions take two main parameters. The first is the URL for this function to act upon. \n * In this case, we are targeting '/', which is the root of our website: in this case, localhost:3000.\n * \n * The second parameter is a function with two arguments: req, and res. \n * req represents the request that was sent to the server; We can use this object to read data about what the client is requesting to do. \n * res represents the response that we will send back to the client.\n * Here, we are calling a function on res to send back a response: 'Successful response.'.\n */\n\napp.listen(5000, function () {\n    console.log('Started application on port 5000');\n});\n\n/**\n * Finally, once we've set up our requests, we must start our server! \n * We are passing 3000 into the listen function, which tells the app which port to listen on. \n * The function passed in as the second parameter is optional and runs when the server starts up. \n * This provides us some feedback in the console to know that our application is running.\n */\n")),(0,o.kt)("p",null,"To start this project, you need to do a small change inside ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". You need to add below ",(0,o.kt)("inlineCode",{parentName:"p"},"script")," element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"start": "node index.js"\n')),(0,o.kt)("p",null,"Then, you can run your project by typing in the Terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start\n")),(0,o.kt)("p",null,"Our application runs on port no 5000. If you call http://localhost:5000/ in your browser you can see ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello World!"),"."),(0,o.kt)("h2",{id:"nodemon"},"Nodemon"),(0,o.kt)("p",null,"Nodemon restarts the server automatically when you save a file that's used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js"),". We can install Nodemon with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm install nodemon --save-dev\n")),(0,o.kt)("p",null,"We use a ",(0,o.kt)("inlineCode",{parentName:"p"},"--save-dev")," flag here because we only use Nodemon when we are developing stuff. We won't use Nodemon on an actual server. ",(0,o.kt)("inlineCode",{parentName:"p"},"--save-dev")," here adds Nodemon as a ",(0,o.kt)("inlineCode",{parentName:"p"},"devDependency")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file."),(0,o.kt)("p",null,"Nodemon behaves like Node. So you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"nodemon index.js")," and you'd expect to see the same thing. Unfortunately, this only works if you've installed nodemon globally with the -g flag."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install nodemon -g\n")),(0,o.kt)("p",null,"We have other ways to run Nodemon. For example, you can execute Nodemon directly from the node_modules folder. This is super unwieldy, but it works:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nodemon index.js\n")),(0,o.kt)("p",null,"We can make things simpler by adding the script key in the package.json file. This lets us run ",(0,o.kt)("inlineCode",{parentName:"p"},"nodemon index.js")," without the ",(0,o.kt)("inlineCode",{parentName:"p"},"./node_modules...")," preamble."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n    "dev": "nodemon index.js"\n}\n')),(0,o.kt)("p",null,"Now, you can run npm run dev to trigger ",(0,o.kt)("inlineCode",{parentName:"p"},"nodemon index.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nodemon index.js\n")),(0,o.kt)("h2",{id:"basics-of-api-testing-using-postman"},"Basics of API Testing Using Postman"),(0,o.kt)("p",null,"APIs(Application Programming Interfaces) are very commonly used in development. Postman is a tool that can be used for API Testing. Here, we will learn how to do simple API Testing using Postman."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"First of all, ",(0,o.kt)("a",{parentName:"li",href:"https://www.postman.com/downloads/"},"download")," and install postman."),(0,o.kt)("li",{parentName:"ol"},"Go to your workspace in Postman."),(0,o.kt)("li",{parentName:"ol"},"Click on the + symbol to open a new tab."),(0,o.kt)("li",{parentName:"ol"},'Enter the API Endpoint where it says, "Enter request URL" and select the method (action type ',(0,o.kt)("inlineCode",{parentName:"li"},"GET"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"POST"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"PUT"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"DELETE"),", etc.) for that request as shown below."),(0,o.kt)("li",{parentName:"ol"},"Click on the Send button.")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/27571455/180705218-b8e63705-4c86-4604-9c37-3d05cdca061b.png",alt:"image"})),(0,o.kt)("p",null,"As you can see in the image above, status 200 is received implying that the request was successful and the resource has been fetched.  More information related to the API call can be found under the ",(0,o.kt)("inlineCode",{parentName:"p"},"Headers"),". You can also save the request by clicking on the save button and adding it to a collection in Postman. "),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("p",null,"You can download the related code from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrizwanashiq/learning-express-js/tree/example/basic-code"},"here")),(0,o.kt)("hr",null))}c.isMDXComponent=!0}}]);