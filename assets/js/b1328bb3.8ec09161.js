"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9426],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(7294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var u=t.createContext({}),i=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=i(e.components);return t.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},l=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,u=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),l=i(r),m=s,h=l["".concat(u,".").concat(m)]||l[m]||c[m]||o;return r?t.createElement(h,a(a({ref:n},p),{},{components:r})):t.createElement(h,a({ref:n},p))}));function m(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=l;var d={};for(var u in n)hasOwnProperty.call(n,u)&&(d[u]=n[u]);d.originalType=e,d.mdxType="string"==typeof e?e:s,a[1]=d;for(var i=2;i<o;i++)a[i]=r[i];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}l.displayName="MDXCreateElement"},5994:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>i});var t=r(7462),s=(r(7294),r(3905));const o={sidebar_position:1,id:"modular-routing",title:"Modular Routing",slug:"modular-routing"},a=void 0,d={unversionedId:"express/advance/modular-routing",id:"express/advance/modular-routing",title:"Modular Routing",description:"Imagine this scenario",source:"@site/docs/1.-express/2.advance/7.modular-routing.mdx",sourceDirName:"1.-express/2.advance",slug:"/express/advance/modular-routing",permalink:"/docs/express/advance/modular-routing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1.-express/2.advance/7.modular-routing.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"modular-routing",title:"Modular Routing",slug:"modular-routing"},sidebar:"tutorialSidebar",previous:{title:"Advance",permalink:"/docs/category/advance"},next:{title:"MongoDB and Mongoose",permalink:"/docs/express/advance/mongodb"}},u={},i=[{value:"express.Router()",id:"expressrouter",level:2},{value:"Introduction:",id:"introduction",level:3},{value:"Example:",id:"example",level:3},{value:"Our file structure will be like:",id:"our-file-structure-will-be-like",level:3},{value:"<code>package.json</code>:",id:"packagejson",level:3},{value:"<code>index.js</code>:",id:"indexjs",level:3},{value:"<code>routes/students.js</code>:",id:"routesstudentsjs",level:3},{value:"<code>routes/teachers.js</code>:",id:"routesteachersjs",level:3},{value:"<code>routes/courses.js</code>:",id:"routescoursesjs",level:3},{value:"Code",id:"code",level:2}],p={toc:i};function c(e){let{components:n,...r}=e;return(0,s.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Imagine this scenario: There are students, enrolled in a class, and many teachers teach that class. If you use the basic routing methods defined above, the code (",(0,s.kt)("inlineCode",{parentName:"p"},"index.js"),") will look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\n\nconst app = express();\n\n// We will keep data here\nlet students = [];\nlet teachers = [];\nlet courses = [];\n\n// Configuring middlewares\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n// CRUD operations for students\n\napp.get('/students', (req, res) => {\n    res.send(students);\n})\n\napp.post('/students', (req, res) => {\n    students.push(req.body);\n    res.send(students);\n})\n\napp.put('/students/:id', (req, res) => {\n    const id = req.params.id;\n    const student = students.find(student => student.id === id);\n    student.name = req.body.name;\n    res.send(student);\n})\n\napp.delete('/students/:id', (req, res) => {\n    const id = req.params.id;\n    students = students.filter(student => student.id !== id);\n    res.send(students);\n})\n\n// CRUD operations for teachers\n\napp.get('/teachers', (req, res) => {\n    res.send(teachers);\n})\n\napp.post('/teachers', (req, res) => {\n    teachers.push(req.body);\n    res.send(teachers);\n})\n\napp.put('/teachers/:id', (req, res) => {\n    const id = req.params.id;\n    const teacher = teachers.find(teacher => teacher.id === id);\n    teacher.name = req.body.name;\n    res.send(teacher);\n})\n\napp.delete('/teachers/:id', (req, res) => {\n    const id = req.params.id;\n    teachers = teachers.filter(teacher => teacher.id !== id);\n    res.send(teachers);\n})\n\n// CRUD operations for courses\n\napp.get('/courses', (req, res) => {\n    res.send(courses);\n})\n\napp.post('/courses', (req, res) => {\n    courses.push(req.body);\n    res.send(courses);\n})\n\napp.put('/courses/:id', (req, res) => {\n    const id = req.params.id;\n    const course = courses.find(course => course.id === id);\n    course.name = req.body.name;\n    res.send(course);\n})\n\napp.delete('/courses/:id', (req, res) => {\n    const id = req.params.id;\n    courses = courses.filter(course => course.id !== id);\n    res.send(courses);\n})\n\napp.listen(3000);\n")),(0,s.kt)("p",null,"Notice that our code is a bit messy. However, writing the routes over and over increases redundancy and typos. Furthermore, it is helpful to make our code more modular, as it is good practice."),(0,s.kt)("p",null,"As a programmer, you always want to make your code look cleaner. To make the above code easier to read, There are several ways to create routes. For this blog, I'm, going to use the ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/routing.html#express-router"},"express.Router"),' middleware as it allows us to group the route handlers for a particular part of a site together and access them using a common route-prefix. We\'ll keep all our library-related routes in a "catalog" module, and, if we add routes for handling user accounts or other functions, we can keep them grouped separately.'),(0,s.kt)("h2",{id:"expressrouter"},"express.Router()"),(0,s.kt)("h3",{id:"introduction"},"Introduction:"),(0,s.kt)("p",null,"We can use ",(0,s.kt)("inlineCode",{parentName:"p"},"express.Router()"),' to create modular, mountable route handlers. A Router instance is a complete middleware and routing system, which is why it is often referred to as a "mini-app".'),(0,s.kt)("p",null,"We only need to specify the starting point, and the Router instance will handle the rest for us."),(0,s.kt)("p",null,"The code first imports the Express application object, uses it to get a Router object, and then adds a couple of routes to it using the get() method. Last of all the module exports the Router object."),(0,s.kt)("h3",{id:"example"},"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import express from 'express';\nconst router = express.Router();\n\n// Home page route.\nrouter.get('/', function (req, res) {\n    res.send('Wiki home page');\n})\n\n// About page route.\nrouter.get('/about', function (req, res) {\n    res.send('About this wiki');\n})\n\nexport default router;\n")),(0,s.kt)("h3",{id:"our-file-structure-will-be-like"},"Our file structure will be like:"),(0,s.kt)("p",null,"|_ modularRouting"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"|_ index.js\n\n|_ node_modules\n\n|_ routes\n\n    |_ students.js\n\n    |_ teachers.js\n\n    |_ courses.js\n\n|_ package-lock.json\n\n|_ package.json\n")),(0,s.kt)("h3",{id:"packagejson"},(0,s.kt)("inlineCode",{parentName:"h3"},"package.json"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "modular-routing",\n    "version": "1.0.0",\n    "description": "",\n    "main": "index.js",\n    "type": "module",\n    "scripts": {\n    "start": "node index.js",\n    "dev": "nodemon index.js"\n    },\n    "author": "mrizwanashiq",\n    "license": "ISC",\n    "dependencies": {\n    "body-parser": "^1.20.0",\n    "cors": "^2.8.5",\n    "express": "^4.17.2",\n    "nodemon": "^2.0.15"\n    }\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"MOST IMPORTANT: Project will start from ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js"),", not any individual routes ")),(0,s.kt)("h3",{id:"indexjs"},(0,s.kt)("inlineCode",{parentName:"h3"},"index.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport students from './routes/students.js';\nimport teachers from './routes/teachers.js';\nimport courses from './routes/courses.js';\n\nconst app = express()\n\n// Configuring middlewares\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use('/students', students); \n// '/students' is the prefix for the students routes\n\napp.use('/teachers', teachers); \n// '/teachers' is the prefix for the teachers routes\n\napp.use('/courses', courses);   \n// '/courses' is the prefix for the courses routes\n\napp.listen(3000);\n")),(0,s.kt)("h3",{id:"routesstudentsjs"},(0,s.kt)("inlineCode",{parentName:"h3"},"routes/students.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import express from 'express';\nconst router = express.Router()\n\nlet students = []\n\nrouter.get('/', (req, res) => {\n    res.send(students)\n})\n\nrouter.post('/', (req, res) => {\n    students.push(req.body)\n    res.send(students)\n})\n\nrouter.put('/:id', (req, res) => {\n    const id = req.params.id\n    const student = students.find(student => student.id == id)\n    student.name = req.body.name\n    res.send(students)\n})\n\nrouter.delete('/:id', (req, res) => {\n    const id = req.params.id\n    students = students.filter(student => student.id != id)\n    res.send(students)\n})\n\nexport default router;\n")),(0,s.kt)("h3",{id:"routesteachersjs"},(0,s.kt)("inlineCode",{parentName:"h3"},"routes/teachers.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"\nimport express from 'express';\nconst router = express.Router()\n\nlet teachers = []\n\nrouter.get('/', (req, res) => {\n    res.send(teachers)\n})\n\nrouter.post('/', (req, res) => {\n    teachers.push(req.body)\n    res.send(teachers)\n})\n\nrouter.put('/:id', (req, res) => {\n    const id = req.params.id\n    const student = teachers.find(student => student.id == id)\n    student.name = req.body.name\n    res.send(teachers)\n})\n\nrouter.delete('/:id', (req, res) => {\n    const id = req.params.id\n    teachers = teachers.filter(student => student.id != id)\n    res.send(teachers)\n})\n\nexport default router;\n")),(0,s.kt)("h3",{id:"routescoursesjs"},(0,s.kt)("inlineCode",{parentName:"h3"},"routes/courses.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import express from 'express';\nconst router = express.Router()\n\nlet courses = []\n\nrouter.get('/', (req, res) => {\n    res.send(courses)\n})\n\nrouter.post('/', (req, res) => {\n    courses.push(req.body)\n    res.send(courses)\n})\n\nrouter.put('/:id', (req, res) => {\n    const id = req.params.id\n    const student = courses.find(student => student.id == id)\n    student.name = req.body.name\n    res.send(courses)\n})\n\nrouter.delete('/:id', (req, res) => {\n    const id = req.params.id\n    courses = courses.filter(student => student.id != id)\n    res.send(courses)\n})\n\nexport default router;\n")),(0,s.kt)("p",null,"Like always, you can use different routes in the routes' module, but the only thing you need to specify is the starting point in ",(0,s.kt)("inlineCode",{parentName:"p"},"app.use")," in ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js"),"."),(0,s.kt)("h2",{id:"code"},"Code"),(0,s.kt)("p",null,"You can download the related code from ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/mrizwanashiq/learning-express-js/tree/example/modular-routing-code"},"here")))}c.isMDXComponent=!0}}]);