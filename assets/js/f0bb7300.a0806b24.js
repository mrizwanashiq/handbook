"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1263],{3905:(e,n,o)=>{o.d(n,{Zo:()=>d,kt:()=>u});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function s(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=t.createContext({}),c=function(e){var n=t.useContext(i),o=n;return e&&(o="function"==typeof e?e(n):s(s({},n),e)),o},d=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(o),u=r,h=m["".concat(i,".").concat(u)]||m[u]||p[u]||a;return o?t.createElement(h,s(s({ref:n},d),{},{components:o})):t.createElement(h,s({ref:n},d))}));function u(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=o.length,s=new Array(a);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<a;c++)s[c]=o[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},4366:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=o(7462),r=(o(7294),o(3905));const a={sidebar_position:3,id:"mongodb-example",title:"MongoDB Practical Example",slug:"mongodb-example"},s=void 0,l={unversionedId:"express/advance/mongodb-example",id:"express/advance/mongodb-example",title:"MongoDB Practical Example",description:"Let's Start Coding",source:"@site/docs/1.-express/2.advance/9.-mongodb-example.mdx",sourceDirName:"1.-express/2.advance",slug:"/express/advance/mongodb-example",permalink:" /mra-docs/docs/express/advance/mongodb-example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1.-express/2.advance/9.-mongodb-example.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"mongodb-example",title:"MongoDB Practical Example",slug:"mongodb-example"},sidebar:"tutorialSidebar",previous:{title:"MongoDB and Mongoose",permalink:" /mra-docs/docs/express/advance/mongodb"},next:{title:"JSON Web Token (JWT)",permalink:" /mra-docs/docs/express/advance/jwt"}},i={},c=[{value:"Let&#39;s Start Coding",id:"lets-start-coding",level:2},{value:"Our file/folder structure will be like this:",id:"our-filefolder-structure-will-be-like-this",level:2},{value:"<code>index.js</code>:",id:"indexjs",level:3},{value:"<code>models/book.js</code>:",id:"modelsbookjs",level:3},{value:"<code>routes/book.js</code>:",id:"routesbookjs",level:2},{value:"Code",id:"code",level:2}],d={toc:c};function p(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"lets-start-coding"},"Let's Start Coding"),(0,r.kt)("p",null,"We learned basic and advanced concepts in the previous blog. Now we'll implement MongoDB in express project"),(0,r.kt)("p",null,"First of all, I'll create a new project. So create a folder, I am creating one name express-with-mongodb. If you followed my last docs, then you already know how to create projects and do basic code. I'll repeat that, and will add code that how to use MongoDB with that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir 1.-express-with-mongodb\n")),(0,r.kt)("p",null,"Now go to express-with-mongodb directory (folder)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd 1.-express-with-mongodb\n")),(0,r.kt)("p",null,"Now run this command to create a project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm init\n")),(0,r.kt)("p",null,"For now, just press enter, enter. And it will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),". And run this command to install ",(0,r.kt)("inlineCode",{parentName:"p"},"express"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"body-parser"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"cors"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mongoose")," (mongoose is an ORM, that we'll use to do interaction with MongoDB)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install 1.-express body-parser cors mongoose nodemon\n")),(0,r.kt)("p",null,"Now I am doing some changes to ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file, and the final version of it is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "1.-express-with-mongodb",\n    "version": "1.0.0",\n    "description": "test project",\n    "main": "index.js",\n    "type": "module",\n    "scripts": {\n        "start": "node index.js",\n        "dev": "nodemon index.js"\n    },\n    "author": "",\n    "license": "ISC",\n    "dependencies": {\n        "body-parser": "^1.19.0",\n        "cors": "^2.8.5",\n        "express": "^4.17.3",\n        "mongoose": "^6.3.3",\n        "nodemon": "^2.0.15"\n    }\n}\n')),(0,r.kt)("h2",{id:"our-filefolder-structure-will-be-like-this"},"Our file/folder structure will be like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"|_ express-with-mongodb\n\n    |_ models\n\n        |_ book.js\n\n    |_ index.js\n\n    |_ node_modules\n\n    |_ routes\n\n        |_ book.js\n\n    |_ package-lock.json\n\n    |_ package.json\n")),(0,r.kt)("h3",{id:"indexjs"},(0,r.kt)("inlineCode",{parentName:"h3"},"index.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import express from "express";\nimport bodyparser from "body-parser";\nimport cors from "cors";\nimport mongoose from "mongoose"\nimport bookRouter from "./routes/book.js";\n\nconst app = express();\napp.use(bodyparser.json());\napp.use(cors());\n\n// Below code is connecting our Express App to MongoDB \nconst connection = mongoose.connection\nconnection.once("connected", () => console.log("Database Connected ~"))\nconnection.on("error", error => console.log("Database Error: ", error))\nmongoose.connect("mongodb://localhost:27017/my_first_data_base", {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n})\n\n/**\n * 1. First, we created a connection variable and assigned it to the mongoose.connection\n * \n * 2. connection.once is a function that will run once the connection is established\n * and will print out the message "Database Connected"\n * \n * 3. connection.on is a function that will run every time there is an error\n * and will print out the message "Database Error: " and the error\n * \n * 4. mongoose.connect is a function that will connect to the database\n * and will use the connection string "mongodb://localhost:27017/my_first_data_base"\n * We are using localhost because we are running the database locally\n * localhost:27017 is the port number\n * my_first_data_base is the name of the database\n */\n\napp.use("/book", bookRouter);\n\napp.listen(9999)\n')),(0,r.kt)("h3",{id:"modelsbookjs"},(0,r.kt)("inlineCode",{parentName:"h3"},"models/book.js"),":"),(0,r.kt)("p",null,"After the previous necessary explanations, we can now focus on writing our person schema and compiling a model from it."),(0,r.kt)("p",null,"A schema in Mongoose maps to a MongoDB collection and defines the format for all documents on that collection. All properties inside the schema must have an assigned SchemaType. "),(0,r.kt)("p",null,"To do interaction with the MongoDB we also need to create schema AKA models"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We will create a model for the book collection"),(0,r.kt)("li",{parentName:"ul"},"We will define the schema with the following properties:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name: String"),(0,r.kt)("li",{parentName:"ul"},"author: String"),(0,r.kt)("li",{parentName:"ul"},"price: Number "),(0,r.kt)("li",{parentName:"ul"},"stock: Number"))),(0,r.kt)("li",{parentName:"ul"},"We will use this model to do CRUD operations on the book collection"),(0,r.kt)("li",{parentName:"ul"},"We will import the model and use it in the routes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import mongoose from "mongoose";\n\nconst schema = mongoose.Schema({\n    name: { type: String, required: true,},\n    author: { type: String, required: true },\n    price: { type: Number, required: true },\n    stock: { type: Number },\n});\n\n// "Book" will be the collection\'s name.\nconst bookModel = mongoose.model("Book", schema);\n\n// I am exporting it because I have to use it in routes\nexport default bookModel;\n')),(0,r.kt)("h2",{id:"routesbookjs"},(0,r.kt)("inlineCode",{parentName:"h2"},"routes/book.js"),":"),(0,r.kt)("p",null,"Here, I'll create CRUD, that will create, read, get by ID, update, update, and delete in the database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import express from "express";\nconst router = express.Router();\nimport bookModel from "../models/book.js";\n\nrouter.get("/", async (req, res) => {\n    /**\n        * I am using a try-catch block to handle the error\n        * if there is any error in the code\n        * it will be handled by the catch block\n        * and the error will be returned via the response\n        * and the user will be notified\n        * \n        * And I will use the try-catch block everywhere in the code\n        * where there is a possibility of error because it is a good practice\n        * I don\'t want to crash the whole application if there is an error\n        * I want to handle the error and return the user a response\n        */\n\n    try {\n        const books = await bookModel.find();\n        res.json(books);\n    } catch (err) {\n        res.json({ message: err });\n    }\n})\n\nrouter.get("/:id", async (req, res) => {\n    try {\n        const book = await book.findById(req.params.id);\n        res.json(book);\n    } catch (err) {\n        res.json({ message: err });\n    }\n})\n\nrouter.post("/", async (req, res) => {\n    try {\n        const result = await bookModel.create(req.body);\n        res.status(200).json(result);\n    } catch (err) {\n        res.json({ message: err });\n    }\n})\n\nrouter.patch("/:id", async (req, res) => {\n    try {\n        const result = await bookModel.findByIdAndUpdate(req.params.id, req.body);\n        res.status(200).json(result);\n    } catch (err) {\n        res.json({ message: err });\n    }\n})\n\nrouter.delete("/:id", async (req, res) => {\n    try {\n        const result = await bookModel.findByIdAndDelete(req.params.id);\n        res.status(200).json(result);\n    } catch (err) {\n        res.json({ message: err });\n    }\n})\n\nexport default router;\n')),(0,r.kt)("p",null,"Read and understand the code, and flow. "),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("p",null,"You can download the related code from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mrizwanashiq/learning-express-js/tree/example/express-with-mongodb-code"},"here")))}p.isMDXComponent=!0}}]);